1. $match

//Filters documents to pass only those that match specified conditions.
db.orders.aggregate([
  { $match: { status: "shipped" } }
])

2. $group

//Groups input documents by a specified identifier expression and applies the accumulator expressions to each group.
db.orders.aggregate([
  { $group: { _id: "$customerId", totalAmount: { $sum: "$amount" } } }
])

3. $project

//Passes along the documents with only the specified fields or newly computed fields.
db.orders.aggregate([
  { $project: { orderId: 1, amount: 1, discount: { $multiply: ["$amount", 0.1] } } }
])

4. $lookup

//Performs a left outer join to another collection in the same database.
db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customerId",
      foreignField: "customerId",
      as: "customerDetails"
    }
  }
])

5. $unwind

//Deconstructs an array field from the input documents to output a document for each element.
db.orders.aggregate([
  { $unwind: "$items" }
])

6. $sort

//Sorts all input documents and passes them to the next stage.
db.orders.aggregate([
  { $sort: { orderDate: -1 } }
])

7. $limit

//Limits the number of documents passed to the next stage.
db.orders.aggregate([
  { $limit: 5 }
])

8. $skip

//Skips a specified number of documents before passing the remaining documents to the next stage.
db.orders.aggregate([
  { $skip: 10 }
])

9. $addFields
//Adds new fields to documents, retaining the original documents.

db.orders.aggregate([
  { $addFields: { discountedAmount: { $subtract: ["$amount", { $multiply: ["$amount", 0.1] }] } } }
])

10. $out
//Writes the resulting documents to a specified collection.
db.orders.aggregate([
  { $match: { status: "shipped" } },
  { $out: "shippedOrders" }
])




